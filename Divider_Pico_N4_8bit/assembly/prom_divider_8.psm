  ; KCPSM6 Program
                   ;Author         - Vikram & Chethan
				   ;revised in Fall 2020, Spring 2021  - Gandhi 10/3/2020, 3/14/2021
                   ;File		   - prom_divider_8.psm (copy of prom_divider_4.psm for students to revise)
;**************************************************************************************
;Port definitions
;**************************************************************************************

; ********* TODO *********
; You need three read ports instead of two read ports.
; You need three write ports instead of two write ports.
; Change the following 4 lines appropriately

                CONSTANT Dividend_port,   		00'd    ;port00 used for loading info of Dividend and Divisor
				CONSTANT Divisor_port,    		01'd     
                CONSTANT Control_signal_port,   02'd	  ;port01 used for loading info of Start and ACK signals

                CONSTANT Quotient_port, 		00'd	  ;port00 used for outputting Quotient and Remainder 
				CONSTANT Remainder_port, 		01'd	  ;port00 used for outputting Quotient and Remainder 
				CONSTANT Current_State_port,    02'd	  ;port01 used for outputting current state info (Done (QD), Compute (QC), Initial (QI), and Done) to LEDs

				CONSTANT Report_Qi, 			00000010'b
				CONSTANT Report_Qc, 			00000100'b
				CONSTANT Report_Qd_Done, 	    00001001'b
		
				CONSTANT Mask_to_check_Start, 	00000010'b
				CONSTANT Mask_to_check_Ack, 	00000001'b			   
				   
;**************************************************************************************
; Special Register usage
;**************************************************************************************
  				  ;NAMEREG Not used here (reference page 53 in User guide Picoblaze_KCPSM6_Release9_30Sept14)
				  ;   One could rename registers as shown below, but I felt, it is not good to rename everything.
				  ;NAMEREG s0 Dividend_s0
				  ;NAMEREG s1 Divisor_s1
				  ;NAMEREG s2 Quotient_s2
				  ;NAMEREG s4 Control_s4
				  ;NAMEREG sA Quotient_Remainder_sA
;**************************************************************************************
;MAIN PROGRAM
;**************************************************************************************
; ********* TODO *********
; Go through the code for each of the three states and revise them appropriately. 
; Since you do not need to concatenate two 4-bit items here, probably you do not need 
; "OR" instruction or teh sA register in this .psm file. 
; s0=Dividend, s1=Divisor, s2=Quotient, s4=Control

				   ;Control Signal Format in s4 {6'b000000, Start, Ack}
		   
	state_initial: OUTPUTK Report_Qi, Current_State_port 	; Indicating Current State as Initial State (QI)
				   INPUT s0, Dividend_port					  
				   INPUT s1, Divisor_port
				   LOAD s2,00								; Quotient Counter in the upper 4 bits of s2

				   OUTPUT s2, Quotient_port          		; Sending out initial Quotient and Remainder (Dividend(X)) to fabric logic
				   OUTPUT s0, Remainder_port				; same of divident
				   INPUT s4, Control_signal_port			; Load the Control Signal Information into register s4
				   AND s4, Mask_to_check_Start				; Check to see if Start Control Signal is set using 00000010'b Mask
				   JUMP Z, state_initial		 			; Jump back to state_initial if Start signal did not go active	   				   
				   JUMP state_compute						; Jump to Compute State if Start (BtnL) is pressed 

;***************************************************************************************
;Compute State (Division Sequence)
;****************************************************************************************					
	state_compute: OUTPUTK Report_Qc, Current_State_port  	; Indicating Current State as Compute State	(QC)
							; Merge Quotient_Remainder into sA for reporting to the top design
				   OUTPUT s2, Quotient_port		; Sending out Quotient and Remainder (Dividend(X)) to the fabric logic
				   COMPARE s0, s1							; Compare Dividend and Divisor to check if Dividend is smaller than Divisor
				   JUMP C, state_done						; If Dividend is smaller, jump to Done State (QD)
				   SUB s0, s1								; Subtract Divisor from Dividend
				   ADD s2, 01								; Increment Quotient (in the upper fours bits of s2) after each repetitive Subtraction by adding 1
				   JUMP state_compute						; If Dividend is not smaller, stay in Compute State (QC)

;****************************************************************************************
;Done State
;****************************************************************************************
	state_done:	   OUTPUTK Report_Qd_Done, Current_State_port	; Indicating Current State as Done State and also the Done signal (QD, Done)	   
							; Merge Quotient_Remainder into sA for reporting to the top design
				   OUTPUT s2, Quotient_port		; Sending out Quotient and Remainder to the fabric logic
				   OUTPUT s0, Remainder_port
				   INPUT s4, Control_signal_port			; Load the Control Signal Information into register s4
				   AND s4, Mask_to_check_Ack				; Check to see if ACK is received
				   JUMP Z, state_done						; Jump to state_initial if ACK is received
				   JUMP state_initial						; Stay in Done State till ACK comes (until BtnR is pressed)
;**************************************************************************************
;Interrupt Vector
;**************************************************************************************
                   ;Not used here
                   ;ADDRESS 3FF
			
                      